1.	What is the difference between a definition and a declaration?
	A declaration is simply a statement which notifies the compiler that a function exists with the appropriate return
	type and any argument types. A definition is a declaration which also creates the space in the memory for the 
	defined type as well as its implementation details.

2.	How do we syntactically distinguish between a function declaration and a function definition?
	A function declaration has only the return type, the identifier, and the required parameters. A definition has these
	things as well as the function body which contains the implementation details.

3.	How do we syntactically distinguish between a variable declaration and a variable definition?
	A variable declaration is simply the type and the identifier, as well as any modifiers such as extern or const. A
	variable definition also initializes the variable either with a code block or an "=" operator.

4.	Why can't you use the functions in a calculator program from Chapter 6 without declaring them first?
	Without a declaration, the program effectively doesn't know they exist. C++ does not have the language implementation
	lookup undefined functions and use them. This is primarily to keep a clear separation between the implementation and
	the interface of a function.

5.	Is int a; a definition or a declaration?
	It is a declaration. Primative types in C++ do not have a default constructor and must be manually initialized.

6.	Why is it a good idea to initialize variables when they are declared?	
	It is a good idea because it prevents the accident use of an undefined variable should it be accessed before it 
	has been initialized.

7.	What can a function declaration consist of?
	A function declaration must have a return type, an identifier, and parameters. 

8.	What does a good indentation do?
	Good indentation keeps code tidy and readable, it also denotes nested blocks of code from the larger body of 
	code that it is surrounded by.

9.	What are header files used for?
	Header files are used to contain the declarations of classes, functions, and variables across source files so they
	may be interlinked and used.

10.	What is the scope of a declaration?
	The scope of a declaration is the area of code where that declaration will be recognized.

11.	What kinds of scopes are there?
	Global Scope		-		Global Variables.
	Namespace Scope		-		namespaces such as STD::
	Class Scope			-		Members of a class, i.e. customer.total();
	Local Scope			-		Local variables between {}, such as int a = 5; in a function.
	Statement Scope		-		Exists only within a statement, such as a for loop or a while loop.

12.	What is the difference between a class scope and a local scope?
	Class scope exists within the object, for the duration that the object exists. Local scope exists solely within 
	braces and ceases to exist once the block is executed.

13.	Why should a programmer minimize the number of global variables?
	Global variables improperly used make maintaining and refactoring the code much harder, as there can be multiple
	dependencies across functions on a single variable. It can also potentially make naming confusing as programs grow
	larger.

14.	What is the difference between pass-by-value and pass-by-reference?
	Pass by value passes a copy of the value, pass-by-reference passes the memory location of the argument and does not
	create a copy.

15.	What is the difference between pass-by-reference and pass-by-const-reference?
	Const-reference passes the memory address of the variable but does not allow it to be manipulated, only read. 
	Reference without const allows for manipulation of the memory at the passed address.

16.	What is a swap()?
	swap() is an std:: function that places the reference of x where reference y was, and reference y where refernce x was, 
	without altering the idenfitiers.

17.	Would you ever define a function witha vector<double>-by-value parameter?
	It's unlikely but not impossible. For instance, if you wanted to return a copy of the vector this would be a way to do it.
	However, in most cases you would likely pass by reference in order to save having to copy the whole vector, and also
	that way you could directly manipulate the vector if so desired.

18.	Give an example of undefined order of evalation? Why can undefined order of evaluation be a problem?
	v[i] = ++i is an example of an undefined order of evaluation, where it is not exactly known which one will be read
	first. For instance if i = 7 and v[7] = ++7, it may well end up being v[8] = 8, or it may be v[7] = 8. This can be
	a problem because in most cases undefined behaviors ultimately mean unintended consequences, which is the exact 
	opposite of what is desired in a program.

19.	What do x&&y and x||y, respectively, mean?
	x && y is a boolean AND statement, x || y is a boolean OR statement.

20.	Which of the following is standard conforming C++? 
	Functions within Functions	:	No
	Functions within Classes	:	Yes
	Classes within Classes		:	Yes
	Classes within Functions	:	Yes, but it is rarely a good idea, except when it is.

21.	What goes into an activation record?
	A copy of all its parameters and local variables, as well as all its implementation details.

22.	What is a call stack and why do we need one?
	A call stack is the data structure that determines the order of execution for function calls and operates on a LIFO
	principle. Without a call stack the behavior of a program would be unpredictable, if even functional at all.

23. What is the purpose of a namespace?
	A namespace groups together functions, classes, data, and types into an identifiable and named area of the program.

24.	How does a namespace differ from a class?
	A namespace does not have a type and exists solely to group together code under an identifier.

25.	What is a using declaration?
	A using declaration instructs the compiler to look for the function or data in the designated using namespace if
	it cannot be found in the current namespace.

26. Why should you avoid using directives in a header?
	By using a using directive in a header, you inheritly apply it to everything using that header. This in turn makes
	the namespaces confused at best, and at worst can lead you to not know where exactly a function is coming from and
	may get naming clashes.

27.	What is namespace std?
	std is the standard library for C++ and contains a large variety of extremely well known and used functions and
	types, such as string.